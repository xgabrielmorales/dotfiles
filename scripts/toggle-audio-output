#!/usr/bin/python

import os
import json
import subprocess
from subprocess import CompletedProcess
from typing import Optional


ROFI_THEME_PATH = f"{os.environ['HOME']}/.config/rofi/default/rofi-mpd.rasi"
ROFI = ["rofi", "-theme", f"{ROFI_THEME_PATH}", "-i", "-dmenu", "-p", "Output"]


def get_avalible_sinks() -> list[dict]:
    """Get the list of sinks available from pactl.

    Return:
        A dictionary with a description of the sink and the sink itself.
    """

    pactl_sinks: CompletedProcess[str] = subprocess.run(
        ["pactl", "--format=json", "list", "sinks"],
        capture_output=True,
        text=True
    )

    sinks: list[dict] = json.loads(pactl_sinks.stdout)

    avalible_sinks: list[dict] = []
    for sink in sinks:
        avalible_sinks.append({
            'name': sink['name'],
            'description': sink['description'],
            'ports': sink['ports']
        })

    return avalible_sinks


def display_to_rofi(
    objs: list[dict],
    field: str = 'description'
) -> Optional[dict]:

    fields: str = "\n".join(obj[field] for obj in objs)

    kwargs: dict = {}
    kwargs['stdout'] = subprocess.PIPE
    kwargs['universal_newlines'] = True
    rofi: CompletedProcess[str] = subprocess.run(ROFI, input=fields, **kwargs)

    for obj in objs:
        if obj[field] == rofi.stdout.strip():
            return obj

    return None

def set_default_sink(sink: Optional[dict]) -> None:
    if not sink:
        return

    if len(sink['ports']) < 2:
        subprocess.run(["pactl", "set-default-sink", sink['name']])

    return set_default_sink_port(sink)


def set_default_sink_port(sink: Optional[dict]) -> None:
    selected_port: Optional[dict] = display_to_rofi(sink['ports'])

    if not selected_port:
        return None

    subprocess.run(["pactl", "set-sink-port", sink['name'], selected_port['name']])


def main() -> int:
    avalible_sinks: list[dict] = get_avalible_sinks()
    selected_sink: Optional[dict] = display_to_rofi(avalible_sinks)
    set_default_sink(selected_sink)

    return 0


if __name__ == "__main__":
    main()
